<div class = "block1">
    <div class="daimei">
      <h1>Today’s health observation</h1>
      <h2>今日の健康観察</h2>
    </div>
    <div class ="gennkido">
        <p>今日のあなたの「元気度」は…？</p>
        <div class ="sinndann"> 
            <%= link_to "✿診断スタート⇒", new_mind_path, class: "link" %>
        </div>
    </div>   
</div>
<div class= "block2-back">
  <div class = "block2">
    <div class="daimei">
      <h1>Share with friends</h1>
      <h2>友達とシェアしよう</h2>
    </div>
        <div class="tsububasho">
          <div class="item">
            <%= image_tag 'minnnanotsubuyaki.png', class:"fukidashi"%>
            <p class="title">自分の気持ちをシェアしよう</p>
            <p class="link"><%= link_to "みんなのつぶやき", hearts_tsubuyaki_path %></p>
          </div>
          <div class="item">
            <%= image_tag 'osusumenobasho.png', class:"fukidashi"%>  
            <p class="title">自分の体験をシェアしよう</p>
            <p class="link"><%= link_to "おすすめの場所", hearts_taiken_path %></p>
          </div>
        </div>
  </div>
</div>

<div class = "block3">
    <div class="daimei">
      <h1>Health calender</h1>
      <h2>健康カレンダー</h2>
    </div>
        <div style="width: 800px; display: flex; justify-content: space-between; align-items: center; margin: 0 auto;"> 
        <button id="prevButtorails sn">&lt;</button>
        <canvas id="genkiChart"></canvas> 
        <button id="nextButton">&gt;</button>
</div>

<style>
  #prevButton, #nextButton {
    background-color: transparent; 
    border: none; 
    color: rgba(75, 192, 192, 1); 
    font-size: 20px; 
    cursor: pointer; 
  }
</style>

<script>
  const ctx = document.getElementById('genkiChart').getContext('2d');
  const chartData = <%= @chart_data.to_json.html_safe %>;

  new Chart(ctx, {
    type: 'line',
    data: {
      labels: chartData.map(data => data.date),
      datasets: [{
        label: 'genki',
        data: chartData.map(data => data.value),
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1
      }]
    },
    options: {
      spanGaps: true, 
      scales: {
        x: {
          ticks: {
            autoSkip: false, 
            maxRotation: 0, 
          }
        },
        y: {
          beginAtZero: true,
          max: 5,
          ticks: {
            stepSize: 1
          }
        }
      }
    }
  });

  const prevButton = document.getElementById('prevButton');
  const nextButton = document.getElementById('nextButton');
  let offset = <%= params[:offset].to_i || 0 %>;

  prevButton.addEventListener('click', () => {
    offset += 7; 
    window.location.href = `?offset=${offset}`;
  });

  nextButton.addEventListener('click', () => {
    offset -= 7; 
    if (offset < 0) offset = 0; 
    window.location.href = `?offset=${offset}`;
  });
</script>

